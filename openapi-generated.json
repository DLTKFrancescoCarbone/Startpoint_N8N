{
  "openapi": "3.0.0",
  "info": {
    "title": "FC SMB POC Backend API",
    "version": "1.0.0",
    "description": "\n**Startpoint ERP Project Data Model POC** - Backend API for managing projects, phases, tasks, team assignments, timesheets, and reference data\n\n## Authentication\nAll API endpoints require a Bearer token in the Authorization header:\n```\nAuthorization: Bearer your-api-token-here\n```\n\n## Features\n- **3-Level Project Hierarchy**: Projects → Phases → Tasks\n- **Team Management**: Role-based team member assignments\n- **Timesheet System**: Comprehensive time tracking with approval workflows\n- **Client Management**: Enhanced client information with contact details\n- **Reference Data**: Disciplines, rate tables, and system metadata\n- **History Tracking**: Comprehensive audit trail with version control and change tracking for all entities\n\n## Business Rules\n- Projects require client assignments\n- Role-based team member management with unique assignments per project\n- Timesheet approval workflows (Draft → Submitted → Approved/Rejected)\n- Flexible time entry tracking at project, phase, or task level\n    ",
    "contact": {
      "name": "FC SMB POC Team"
    }
  },
  "servers": [
    {
      "url": "https://fc-smb-poc-backend-production.up.railway.app",
      "description": "Production server (Railway)"
    },
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "Token",
        "description": "Enter your API token"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "required": [
          "id",
          "username"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "User unique identifier"
          },
          "username": {
            "type": "string",
            "maxLength": 100,
            "description": "Username (unique)"
          },
          "employeeId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "Linked employee ID"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "employee": {
            "type": "object",
            "description": "Associated employee record",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "INACTIVE"
                ]
              },
              "isProjectManager": {
                "type": "boolean"
              },
              "isPrincipal": {
                "type": "boolean"
              },
              "isMarketing": {
                "type": "boolean"
              },
              "primaryDiscipline": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "Employee": {
        "type": "object",
        "required": [
          "id",
          "name",
          "createdBy",
          "updatedBy"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Employee unique identifier"
          },
          "name": {
            "type": "string",
            "maxLength": 100,
            "description": "Employee full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 255,
            "nullable": true,
            "description": "Employee email address"
          },
          "status": {
            "type": "string",
            "maxLength": 20,
            "default": "ACTIVE",
            "description": "Employee status",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          },
          "isProjectManager": {
            "type": "boolean",
            "default": false,
            "description": "Whether employee can manage projects"
          },
          "isPrincipal": {
            "type": "boolean",
            "default": false,
            "description": "Whether employee is a principal"
          },
          "isMarketing": {
            "type": "boolean",
            "default": false,
            "description": "Whether employee handles marketing"
          },
          "primaryDisciplineId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "Primary discipline ID"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "description": "User ID who created this employee"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "description": "User ID who last updated this employee"
          },
          "employeeNumber": {
            "type": "string",
            "description": "Employee number (auto-generated if not provided)",
            "example": "A1B2C"
          },
          "primaryDiscipline": {
            "$ref": "#/components/schemas/DisciplineSummary",
            "nullable": true
          }
        }
      },
      "Discipline": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Discipline unique identifier"
          },
          "name": {
            "type": "string",
            "maxLength": 100,
            "description": "Discipline name"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Discipline description"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "employees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeSummary"
            }
          },
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectSummary"
            }
          }
        }
      },
      "Client": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Client unique identifier"
          },
          "name": {
            "type": "string",
            "maxLength": 200,
            "description": "Client company name"
          },
          "industry": {
            "type": "string",
            "enum": [
              "RESIDENTIAL_DEVELOPER",
              "COMMERCIAL_REAL_ESTATE",
              "HEALTHCARE",
              "EDUCATION",
              "HOSPITALITY",
              "RETAIL",
              "INDUSTRIAL_MANUFACTURING",
              "GOVERNMENT",
              "NON_PROFIT",
              "TECHNOLOGY",
              "FINANCIAL_SERVICES",
              "OTHER"
            ],
            "nullable": true,
            "description": "Client industry type"
          },
          "companySize": {
            "type": "string",
            "enum": [
              "SMALL",
              "MEDIUM",
              "LARGE",
              "ENTERPRISE"
            ],
            "nullable": true,
            "description": "Company size classification"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Client description"
          },
          "website": {
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "description": "Client website URL"
          },
          "taxId": {
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "description": "Tax identification number"
          },
          "status": {
            "type": "string",
            "maxLength": 20,
            "default": "active",
            "description": "Client status",
            "enum": [
              "active",
              "inactive",
              "prospect"
            ]
          },
          "primaryContactName": {
            "type": "string",
            "maxLength": 100,
            "nullable": true,
            "description": "Primary contact person name"
          },
          "primaryContactEmail": {
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "description": "Primary contact email address",
            "format": "email"
          },
          "primaryContactPhone": {
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "description": "Primary contact phone number"
          },
          "primaryContactRole": {
            "type": "string",
            "maxLength": 100,
            "nullable": true,
            "description": "Primary contact role/title"
          },
          "addressLine1": {
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "description": "Street address line 1"
          },
          "addressLine2": {
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "description": "Street address line 2"
          },
          "city": {
            "type": "string",
            "maxLength": 100,
            "nullable": true,
            "description": "City"
          },
          "state": {
            "type": "string",
            "maxLength": 100,
            "nullable": true,
            "description": "State or province"
          },
          "postalCode": {
            "type": "string",
            "maxLength": 20,
            "nullable": true,
            "description": "Postal/ZIP code"
          },
          "country": {
            "type": "string",
            "maxLength": 100,
            "nullable": true,
            "description": "Country"
          },
          "billingContactName": {
            "type": "string",
            "maxLength": 100,
            "nullable": true,
            "description": "Billing contact person name"
          },
          "billingContactEmail": {
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "description": "Billing contact email address",
            "format": "email"
          },
          "billingContactPhone": {
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "description": "Billing contact phone number"
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "description": "Additional notes about the client"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          },
          "clientNumber": {
            "type": "string",
            "description": "Client number (auto-generated if not provided)",
            "example": "C1234"
          },
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectSummary"
            }
          }
        }
      },
      "RateTable": {
        "type": "object",
        "required": [
          "id",
          "name",
          "effectiveDate"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Rate table unique identifier"
          },
          "name": {
            "type": "string",
            "maxLength": 200,
            "description": "Rate table name"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date",
            "description": "Effective date for this rate table"
          },
          "status": {
            "type": "string",
            "maxLength": 20,
            "default": "active",
            "description": "Rate table status",
            "enum": [
              "active",
              "inactive"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "description": {
            "type": "string",
            "description": "Rate table description"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          },
          "createdBy": {
            "type": "string",
            "description": "User ID who created this rate table"
          },
          "updatedBy": {
            "type": "string",
            "description": "User ID who last updated this rate table"
          }
        }
      },
      "Project": {
        "type": "object",
        "required": [
          "id",
          "projectNumber",
          "name",
          "createdBy",
          "updatedBy"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Project unique identifier"
          },
          "projectNumber": {
            "type": "string",
            "maxLength": 20,
            "description": "Project number (auto-generated if not provided)"
          },
          "name": {
            "type": "string",
            "maxLength": 200,
            "description": "Project name"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Project description"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "default": "ACTIVE",
            "description": "Project status"
          },
          "clientId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "Client ID"
          },
          "projectType": {
            "type": "string",
            "enum": [
              "RESIDENTIAL",
              "COMMERCIAL",
              "INSTITUTIONAL",
              "INDUSTRIAL",
              "MIXED_USE",
              "RENOVATION",
              "NEW_CONSTRUCTION"
            ],
            "nullable": true,
            "description": "Type of project"
          },
          "primaryDisciplineId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "Primary discipline ID"
          },
          "invoiceFormat": {
            "type": "string",
            "enum": [
              "STANDARD",
              "DETAILED",
              "SUMMARY",
              "HOURLY_BREAKDOWN",
              "MILESTONE_BASED"
            ],
            "nullable": true,
            "description": "Invoice format for billing"
          },
          "rateTableId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "Rate table ID"
          },
          "billingType": {
            "type": "integer",
            "default": 0,
            "description": "Billing type code"
          },
          "projectManagerId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "Project manager employee ID"
          },
          "principalInChargeId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "Principal in charge employee ID"
          },
          "marketingContactId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "Marketing contact employee ID"
          },
          "billingManagerId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "Billing manager employee ID"
          },
          "totalContractAmount": {
            "type": "number",
            "nullable": true,
            "description": "Total contract amount",
            "format": "decimal"
          },
          "estimatedStartDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Estimated project start date"
          },
          "estimatedEndDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Estimated project end date"
          },
          "location": {
            "type": "string",
            "nullable": true,
            "description": "Project location"
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "description": "Additional notes"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "description": "User ID who created this project"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "description": "User ID who last updated this project"
          },
          "client": {
            "$ref": "#/components/schemas/ClientSummary"
          },
          "projectManager": {
            "$ref": "#/components/schemas/EmployeeSummary"
          },
          "primaryDiscipline": {
            "$ref": "#/components/schemas/DisciplineSummary"
          }
        }
      },
      "Phase": {
        "type": "object",
        "required": [
          "id",
          "projectId",
          "name",
          "createdBy",
          "updatedBy"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the phase"
          },
          "projectId": {
            "type": "string",
            "format": "uuid",
            "description": "Project ID this phase belongs to"
          },
          "name": {
            "type": "string",
            "maxLength": 200,
            "description": "Phase name"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Phase description"
          },
          "status": {
            "type": "integer",
            "default": 0,
            "description": "Phase status",
            "enum": [
              0,
              1,
              2,
              3
            ]
          },
          "displayOrder": {
            "type": "integer",
            "default": 1,
            "description": "Display order"
          },
          "budgetAllocationPercent": {
            "type": "number",
            "nullable": true,
            "description": "Budget allocation percentage",
            "format": "decimal"
          },
          "estimatedHours": {
            "type": "number",
            "nullable": true,
            "description": "Estimated hours for phase",
            "format": "decimal"
          },
          "phaseBudget": {
            "type": "number",
            "nullable": true,
            "description": "Phase budget amount"
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "description": "Phase notes"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "description": "User ID who created this phase"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "description": "User ID who last updated this phase"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskSummary"
            }
          }
        }
      },
      "Task": {
        "type": "object",
        "required": [
          "id",
          "phaseId",
          "name",
          "createdBy",
          "updatedBy"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the task"
          },
          "phaseId": {
            "type": "string",
            "format": "uuid",
            "description": "Phase ID this task belongs to"
          },
          "name": {
            "type": "string",
            "maxLength": 200,
            "description": "Task name"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Task description"
          },
          "status": {
            "type": "integer",
            "default": 0,
            "description": "Task status code"
          },
          "displayOrder": {
            "type": "integer",
            "default": 1,
            "description": "Display order within phase"
          },
          "estimatedHours": {
            "type": "number",
            "nullable": true,
            "description": "Estimated hours for this task"
          },
          "actualHours": {
            "type": "number",
            "nullable": true,
            "description": "Actual hours spent on this task"
          },
          "taskBudget": {
            "type": "number",
            "nullable": true,
            "description": "Task budget amount"
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "description": "Task notes"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "description": "User ID who created this task"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "description": "User ID who last updated this task"
          }
        }
      },
      "ProjectTeamMember": {
        "type": "object",
        "required": [
          "id",
          "projectId",
          "employeeId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the team membership"
          },
          "projectId": {
            "type": "string",
            "format": "uuid",
            "description": "Project ID"
          },
          "employeeId": {
            "type": "string",
            "format": "uuid",
            "description": "Employee ID"
          },
          "role": {
            "type": "string",
            "description": "Team member role"
          },
          "employee": {
            "$ref": "#/components/schemas/EmployeeSummary"
          }
        }
      },
      "Timesheet": {
        "type": "object",
        "required": [
          "id",
          "employeeId",
          "periodStart",
          "periodEnd"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Timesheet unique identifier"
          },
          "employeeId": {
            "type": "string",
            "format": "uuid",
            "description": "Employee ID"
          },
          "periodStart": {
            "type": "string",
            "format": "date",
            "description": "Timesheet period start date"
          },
          "periodEnd": {
            "type": "string",
            "format": "date",
            "description": "Timesheet period end date"
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "SUBMITTED",
              "APPROVED",
              "REJECTED"
            ],
            "default": "DRAFT",
            "description": "Timesheet status"
          },
          "totalHours": {
            "type": "number",
            "nullable": true,
            "description": "Total hours logged",
            "format": "decimal"
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "description": "Additional notes"
          },
          "submittedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Submission timestamp"
          },
          "approvedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Approval timestamp"
          },
          "approvedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "ID of user who approved"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          },
          "employee": {
            "$ref": "#/components/schemas/EmployeeSummary"
          },
          "timeEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeEntry"
            }
          }
        }
      },
      "TimeEntry": {
        "type": "object",
        "required": [
          "id",
          "timesheetId",
          "employeeId",
          "entryDate",
          "durationHours",
          "description"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the time entry"
          },
          "timesheetId": {
            "type": "string",
            "format": "uuid",
            "description": "Timesheet ID this entry belongs to"
          },
          "employeeId": {
            "type": "string",
            "format": "uuid",
            "description": "Employee ID"
          },
          "projectId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "Project ID (if work is at project level)"
          },
          "phaseId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "Phase ID (if work is at phase level)"
          },
          "taskId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "Task ID (if work is at task level)"
          },
          "entryDate": {
            "type": "string",
            "format": "date",
            "description": "Date of work performed"
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Start time (optional)"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "End time (optional)"
          },
          "durationHours": {
            "type": "number",
            "description": "Duration in hours",
            "format": "decimal"
          },
          "description": {
            "type": "string",
            "description": "Work description"
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "description": "Additional notes"
          },
          "entryType": {
            "type": "string",
            "enum": [
              "REGULAR",
              "OVERTIME",
              "VACATION",
              "SICK_LEAVE",
              "HOLIDAY",
              "TRAINING",
              "ADMINISTRATIVE"
            ],
            "default": "REGULAR",
            "description": "Entry type"
          },
          "isBillable": {
            "type": "boolean",
            "default": true,
            "description": "Whether this entry is billable"
          },
          "hourlyRate": {
            "type": "number",
            "nullable": true,
            "description": "Hourly rate for this entry",
            "format": "decimal"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "ProjectHistory": {
        "type": "object",
        "required": [
          "id",
          "projectId",
          "version",
          "operation",
          "entityType",
          "changedAt",
          "changedBy",
          "snapshot"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the history record"
          },
          "projectId": {
            "type": "string",
            "format": "uuid",
            "description": "Project ID this history record belongs to"
          },
          "version": {
            "type": "integer",
            "description": "Monotonic version number per project"
          },
          "operation": {
            "type": "string",
            "enum": [
              "CREATE",
              "UPDATE",
              "DELETE"
            ],
            "description": "Type of operation that was performed"
          },
          "entityType": {
            "type": "string",
            "enum": [
              "PROJECT",
              "TEAM",
              "PHASE",
              "TASK"
            ],
            "description": "Type of entity that was changed"
          },
          "entityId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "ID of the specific entity that was changed (null for PROJECT operations)"
          },
          "changedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the change occurred"
          },
          "changedBy": {
            "type": "string",
            "format": "uuid",
            "description": "User ID who made the change"
          },
          "reason": {
            "type": "string",
            "nullable": true,
            "description": "Optional reason for the change"
          },
          "changedFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of field names that were modified"
          },
          "delta": {
            "type": "object",
            "nullable": true,
            "description": "Before/after values for changed fields",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "from": {
                  "description": "Previous value"
                },
                "to": {
                  "description": "New value"
                }
              }
            }
          },
          "snapshot": {
            "type": "object",
            "description": "Complete snapshot of the entity at this point in time"
          }
        }
      },
      "ClientHistory": {
        "type": "object",
        "required": [
          "id",
          "clientId",
          "operation",
          "changedAt",
          "changedBy",
          "snapshot"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the history record"
          },
          "clientId": {
            "type": "string",
            "format": "uuid",
            "description": "Client ID this history record belongs to"
          },
          "operation": {
            "type": "string",
            "enum": [
              "CREATE",
              "UPDATE",
              "DELETE"
            ],
            "description": "Type of operation that was performed"
          },
          "changedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the change occurred"
          },
          "changedBy": {
            "type": "string",
            "format": "uuid",
            "description": "User ID who made the change"
          },
          "changedFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of field names that were modified"
          },
          "delta": {
            "type": "object",
            "nullable": true,
            "description": "Before/after values for changed fields",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "from": {
                  "description": "Previous value"
                },
                "to": {
                  "description": "New value"
                }
              }
            }
          },
          "snapshot": {
            "type": "object",
            "description": "Complete snapshot of the client at this point in time"
          }
        }
      },
      "EmployeeHistory": {
        "type": "object",
        "required": [
          "id",
          "employeeId",
          "operation",
          "changedAt",
          "changedBy",
          "snapshot"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the history record"
          },
          "employeeId": {
            "type": "string",
            "format": "uuid",
            "description": "Employee ID this history record belongs to"
          },
          "operation": {
            "type": "string",
            "enum": [
              "CREATE",
              "UPDATE",
              "DELETE"
            ],
            "description": "Type of operation that was performed"
          },
          "changedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the change occurred"
          },
          "changedBy": {
            "type": "string",
            "format": "uuid",
            "description": "User ID who made the change"
          },
          "changedFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of field names that were modified"
          },
          "delta": {
            "type": "object",
            "nullable": true,
            "description": "Before/after values for changed fields",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "from": {
                  "description": "Previous value"
                },
                "to": {
                  "description": "New value"
                }
              }
            }
          },
          "snapshot": {
            "type": "object",
            "description": "Complete snapshot of the employee at this point in time"
          }
        }
      },
      "TimesheetHistory": {
        "type": "object",
        "required": [
          "id",
          "timesheetId",
          "operation",
          "changedAt",
          "changedBy",
          "snapshot"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the history record"
          },
          "timesheetId": {
            "type": "string",
            "format": "uuid",
            "description": "Timesheet ID this history record belongs to"
          },
          "operation": {
            "type": "string",
            "enum": [
              "CREATE",
              "UPDATE",
              "DELETE"
            ],
            "description": "Type of operation that was performed"
          },
          "changedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the change occurred"
          },
          "changedBy": {
            "type": "string",
            "format": "uuid",
            "description": "User ID who made the change"
          },
          "changedFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of field names that were modified"
          },
          "delta": {
            "type": "object",
            "nullable": true,
            "description": "Before/after values for changed fields",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "from": {
                  "description": "Previous value"
                },
                "to": {
                  "description": "New value"
                }
              }
            }
          },
          "snapshot": {
            "type": "object",
            "description": "Complete snapshot of the timesheet at this point in time"
          }
        }
      },
      "ClientSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Client ID"
          },
          "name": {
            "type": "string",
            "description": "Client name"
          },
          "status": {
            "type": "string",
            "description": "Client status"
          },
          "clientNumber": {
            "type": "string"
          },
          "industry": {
            "type": "string"
          },
          "primaryContactName": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "DisciplineSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Discipline ID"
          },
          "name": {
            "type": "string",
            "description": "Discipline name"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "TimesheetSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Timesheet ID"
          },
          "employeeId": {
            "type": "string",
            "format": "uuid",
            "description": "Employee ID"
          },
          "periodStart": {
            "type": "string",
            "format": "date",
            "description": "Period start date"
          },
          "periodEnd": {
            "type": "string",
            "format": "date",
            "description": "Period end date"
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "SUBMITTED",
              "APPROVED",
              "REJECTED"
            ],
            "description": "Timesheet status"
          },
          "totalHours": {
            "type": "number",
            "nullable": true,
            "description": "Total hours"
          },
          "totalEntries": {
            "type": "integer"
          },
          "totalBillableHours": {
            "type": "number",
            "format": "decimal"
          },
          "totalNonBillableHours": {
            "type": "number",
            "format": "decimal"
          }
        }
      },
      "APIResponse": {
        "type": "object",
        "required": [
          "success"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the request was successful"
          },
          "data": {
            "description": "Response data (varies by endpoint)"
          },
          "error": {
            "type": "string",
            "description": "Error message (present when success=false)"
          },
          "message": {
            "type": "string",
            "description": "Success message"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "totalCount": {
                "type": "integer",
                "description": "Total number of items (for paginated responses)"
              },
              "pageSize": {
                "type": "integer",
                "description": "Number of items per page"
              },
              "currentPage": {
                "type": "integer",
                "description": "Current page number"
              },
              "hasNextPage": {
                "type": "boolean",
                "description": "Whether there are more pages"
              },
              "hasPreviousPage": {
                "type": "boolean",
                "description": "Whether there are previous pages"
              }
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "success",
          "error"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Always false for error responses"
          },
          "error": {
            "type": "string",
            "description": "Error message describing what went wrong"
          },
          "code": {
            "type": "string",
            "description": "Error code for programmatic handling"
          }
        }
      },
      "EmployeeSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "employeeNumber": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad Request - Invalid input data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "success": false,
              "error": "Invalid hierarchy level. Must be between 1 and 3",
              "code": "INVALID_HIERARCHY_LEVEL"
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found - Resource does not exist",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "success": false,
              "error": "WBS item not found",
              "code": "WBS_NOT_FOUND"
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict - Business rule violation",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "success": false,
              "error": "Project Manager role already assigned to another team member for this WBS item",
              "code": "PM_ROLE_ALREADY_ASSIGNED"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "success": false,
              "error": "Internal server error"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Projects",
      "description": "Project management (top-level hierarchy)"
    },
    {
      "name": "Phases",
      "description": "Phase management (project sub-components)"
    },
    {
      "name": "Tasks",
      "description": "Task management (phase sub-components)"
    },
    {
      "name": "Employees",
      "description": "Employee management and role capabilities"
    },
    {
      "name": "Clients",
      "description": "Client management with enhanced contact information"
    },
    {
      "name": "Timesheets",
      "description": "Timesheet management with approval workflows"
    },
    {
      "name": "Time Entries",
      "description": "Individual time entry tracking"
    },
    {
      "name": "Disciplines",
      "description": "Discipline reference data management"
    },
    {
      "name": "Reference Data",
      "description": "Rate tables and other reference data"
    },
    {
      "name": "System",
      "description": "System health and information endpoints"
    },
    {
      "name": "History",
      "description": "Audit trail and change tracking for all entities with version control, point-in-time queries, and delta tracking"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/api/clients": {
      "get": {
        "summary": "List all clients with filtering and pagination",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "description": "Number of clients per page"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive",
                "prospect"
              ]
            },
            "description": "Filter by client status"
          },
          {
            "in": "query",
            "name": "industry",
            "schema": {
              "type": "string",
              "enum": [
                "RESIDENTIAL_DEVELOPER",
                "COMMERCIAL_REAL_ESTATE",
                "HEALTHCARE",
                "EDUCATION",
                "HOSPITALITY",
                "RETAIL",
                "INDUSTRIAL_MANUFACTURING",
                "GOVERNMENT",
                "NON_PROFIT",
                "TECHNOLOGY",
                "FINANCIAL_SERVICES",
                "OTHER"
              ]
            },
            "description": "Filter by industry type"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search in client name and primary contact name"
          }
        ],
        "responses": {
          "200": {
            "description": "Clients retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ClientSummary"
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "totalCount": {
                          "type": "integer"
                        },
                        "pageSize": {
                          "type": "integer"
                        },
                        "currentPage": {
                          "type": "integer"
                        },
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "hasPreviousPage": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create a new client",
        "tags": [
          "Clients"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "industry",
                  "companySize"
                ],
                "properties": {
                  "clientNumber": {
                    "type": "string",
                    "description": "Client number (optional, auto-generated if not provided)",
                    "example": "C1234"
                  },
                  "name": {
                    "type": "string",
                    "description": "Client company name",
                    "example": "Acme Corporation"
                  },
                  "industry": {
                    "type": "string",
                    "enum": [
                      "RESIDENTIAL_DEVELOPER",
                      "COMMERCIAL_REAL_ESTATE",
                      "HEALTHCARE",
                      "EDUCATION",
                      "HOSPITALITY",
                      "RETAIL",
                      "INDUSTRIAL_MANUFACTURING",
                      "GOVERNMENT",
                      "NON_PROFIT",
                      "TECHNOLOGY",
                      "FINANCIAL_SERVICES",
                      "OTHER"
                    ],
                    "description": "Client industry type",
                    "example": "TECHNOLOGY"
                  },
                  "companySize": {
                    "type": "string",
                    "enum": [
                      "SMALL",
                      "MEDIUM",
                      "LARGE",
                      "ENTERPRISE"
                    ],
                    "description": "Company size classification",
                    "example": "MEDIUM"
                  },
                  "description": {
                    "type": "string",
                    "description": "Client description"
                  },
                  "website": {
                    "type": "string",
                    "description": "Client website URL",
                    "example": "https://acmecorp.com"
                  },
                  "taxId": {
                    "type": "string",
                    "description": "Tax identification number"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive",
                      "prospect"
                    ],
                    "description": "Client status",
                    "default": "active"
                  },
                  "primaryContactName": {
                    "type": "string",
                    "description": "Primary contact person name"
                  },
                  "primaryContactEmail": {
                    "type": "string",
                    "format": "email",
                    "description": "Primary contact email address"
                  },
                  "primaryContactPhone": {
                    "type": "string",
                    "description": "Primary contact phone number"
                  },
                  "primaryContactRole": {
                    "type": "string",
                    "description": "Primary contact role/title"
                  },
                  "addressLine1": {
                    "type": "string",
                    "description": "Street address line 1"
                  },
                  "addressLine2": {
                    "type": "string",
                    "description": "Street address line 2"
                  },
                  "city": {
                    "type": "string",
                    "description": "City"
                  },
                  "state": {
                    "type": "string",
                    "description": "State or province"
                  },
                  "postalCode": {
                    "type": "string",
                    "description": "Postal/ZIP code"
                  },
                  "country": {
                    "type": "string",
                    "description": "Country"
                  },
                  "billingContactName": {
                    "type": "string",
                    "description": "Billing contact person name"
                  },
                  "billingContactEmail": {
                    "type": "string",
                    "format": "email",
                    "description": "Billing contact email address"
                  },
                  "billingContactPhone": {
                    "type": "string",
                    "description": "Billing contact phone number"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Additional notes about the client"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Client created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Client"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/clients/{id}": {
      "get": {
        "summary": "Get client by ID with related projects",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Client retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Client"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Client not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "summary": "Update client",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "clientNumber": {
                    "type": "string",
                    "description": "Client number"
                  },
                  "name": {
                    "type": "string",
                    "description": "Client company name"
                  },
                  "industry": {
                    "type": "string",
                    "enum": [
                      "RESIDENTIAL_DEVELOPER",
                      "COMMERCIAL_REAL_ESTATE",
                      "HEALTHCARE",
                      "EDUCATION",
                      "HOSPITALITY",
                      "RETAIL",
                      "INDUSTRIAL_MANUFACTURING",
                      "GOVERNMENT",
                      "NON_PROFIT",
                      "TECHNOLOGY",
                      "FINANCIAL_SERVICES",
                      "OTHER"
                    ],
                    "description": "Client industry type"
                  },
                  "companySize": {
                    "type": "string",
                    "enum": [
                      "SMALL",
                      "MEDIUM",
                      "LARGE",
                      "ENTERPRISE"
                    ],
                    "description": "Company size classification"
                  },
                  "description": {
                    "type": "string",
                    "description": "Client description"
                  },
                  "website": {
                    "type": "string",
                    "description": "Client website URL"
                  },
                  "taxId": {
                    "type": "string",
                    "description": "Tax identification number"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive",
                      "prospect"
                    ],
                    "description": "Client status"
                  },
                  "primaryContactName": {
                    "type": "string",
                    "description": "Primary contact person name"
                  },
                  "primaryContactEmail": {
                    "type": "string",
                    "format": "email",
                    "description": "Primary contact email address"
                  },
                  "primaryContactPhone": {
                    "type": "string",
                    "description": "Primary contact phone number"
                  },
                  "primaryContactRole": {
                    "type": "string",
                    "description": "Primary contact role/title"
                  },
                  "addressLine1": {
                    "type": "string",
                    "description": "Street address line 1"
                  },
                  "addressLine2": {
                    "type": "string",
                    "description": "Street address line 2"
                  },
                  "city": {
                    "type": "string",
                    "description": "City"
                  },
                  "state": {
                    "type": "string",
                    "description": "State or province"
                  },
                  "postalCode": {
                    "type": "string",
                    "description": "Postal/ZIP code"
                  },
                  "country": {
                    "type": "string",
                    "description": "Country"
                  },
                  "billingContactName": {
                    "type": "string",
                    "description": "Billing contact person name"
                  },
                  "billingContactEmail": {
                    "type": "string",
                    "format": "email",
                    "description": "Billing contact email address"
                  },
                  "billingContactPhone": {
                    "type": "string",
                    "description": "Billing contact phone number"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Additional notes about the client"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Client"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Client not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete client",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Client deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Client deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Client not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/clients/meta/industries": {
      "get": {
        "summary": "Get available client industries",
        "tags": [
          "Clients"
        ],
        "responses": {
          "200": {
            "description": "Industries retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "RESIDENTIAL_DEVELOPER",
                          "COMMERCIAL_REAL_ESTATE",
                          "HEALTHCARE",
                          "EDUCATION",
                          "HOSPITALITY",
                          "RETAIL",
                          "INDUSTRIAL_MANUFACTURING",
                          "GOVERNMENT",
                          "NON_PROFIT",
                          "TECHNOLOGY",
                          "FINANCIAL_SERVICES",
                          "OTHER"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/clients/meta/company-sizes": {
      "get": {
        "summary": "Get available company sizes",
        "tags": [
          "Clients"
        ],
        "responses": {
          "200": {
            "description": "Company sizes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "SMALL",
                          "MEDIUM",
                          "LARGE",
                          "ENTERPRISE"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/clients/{id}/history": {
      "get": {
        "summary": "Get client history",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 50
            },
            "description": "Number of history entries to return"
          },
          {
            "in": "query",
            "name": "since",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Show events since this timestamp"
          },
          {
            "in": "query",
            "name": "until",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Show events until this timestamp"
          }
        ],
        "responses": {
          "200": {
            "description": "Client history retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "clientId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "operation": {
                            "type": "string",
                            "enum": [
                              "CREATE",
                              "UPDATE",
                              "DELETE"
                            ]
                          },
                          "changedAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "changedBy": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "changedFields": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "delta": {
                            "type": "object"
                          },
                          "snapshot": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Client not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/clients/{id}/at": {
      "get": {
        "summary": "Get client state at specific timestamp",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID"
          },
          {
            "in": "query",
            "name": "ts",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Timestamp (ISO format)"
          }
        ],
        "responses": {
          "200": {
            "description": "Client state at timestamp retrieved successfully"
          },
          "404": {
            "description": "Client or state not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/clients/{id}/diff": {
      "get": {
        "summary": "Get diff between two client history entries",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID"
          },
          {
            "in": "query",
            "name": "from",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "From timestamp"
          },
          {
            "in": "query",
            "name": "to",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "To timestamp"
          }
        ],
        "responses": {
          "200": {
            "description": "Diff retrieved successfully"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "404": {
            "description": "Client or timestamps not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/disciplines": {
      "get": {
        "summary": "List all disciplines",
        "tags": [
          "Disciplines"
        ],
        "responses": {
          "200": {
            "description": "Disciplines retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Discipline"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "_count": {
                                "type": "object",
                                "properties": {
                                  "employees": {
                                    "type": "integer"
                                  },
                                  "projects": {
                                    "type": "integer"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create a new discipline",
        "tags": [
          "Disciplines"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Discipline name",
                    "example": "Software Engineering"
                  },
                  "description": {
                    "type": "string",
                    "description": "Discipline description",
                    "example": "Software development and engineering services"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Discipline created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Discipline"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/disciplines/{id}": {
      "get": {
        "summary": "Get discipline by ID with related data",
        "tags": [
          "Disciplines"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Discipline ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Discipline retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Discipline"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Discipline not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "summary": "Update discipline",
        "tags": [
          "Disciplines"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Discipline ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Discipline name"
                  },
                  "description": {
                    "type": "string",
                    "description": "Discipline description"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Discipline updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Discipline"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Discipline not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete discipline",
        "tags": [
          "Disciplines"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Discipline ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Discipline deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Discipline deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Discipline is in use and cannot be deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string",
                      "example": "DISCIPLINE_IN_USE"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Discipline not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/employees": {
      "get": {
        "summary": "List all employees with filtering and pagination",
        "tags": [
          "Employees"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of employees per page"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "description": "Filter by employee status"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search in employee name and email"
          },
          {
            "in": "query",
            "name": "disciplineId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter by primary discipline ID"
          },
          {
            "in": "query",
            "name": "isProjectManager",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by project manager capability"
          },
          {
            "in": "query",
            "name": "isPrincipal",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by principal capability"
          },
          {
            "in": "query",
            "name": "isMarketing",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by marketing capability"
          }
        ],
        "responses": {
          "200": {
            "description": "Employees retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Employee"
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "totalCount": {
                          "type": "integer"
                        },
                        "pageSize": {
                          "type": "integer"
                        },
                        "currentPage": {
                          "type": "integer"
                        },
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "hasPreviousPage": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create a new employee",
        "tags": [
          "Employees"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "primaryDisciplineId"
                ],
                "properties": {
                  "employeeNumber": {
                    "type": "string",
                    "description": "Employee number (optional, auto-generated if not provided)",
                    "example": "A1B2C"
                  },
                  "name": {
                    "type": "string",
                    "description": "Employee full name"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Employee email address"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE"
                    ],
                    "default": "ACTIVE",
                    "description": "Employee status"
                  },
                  "isProjectManager": {
                    "type": "boolean",
                    "default": false,
                    "description": "Can serve as project manager"
                  },
                  "isPrincipal": {
                    "type": "boolean",
                    "default": false,
                    "description": "Can serve as principal"
                  },
                  "isMarketing": {
                    "type": "boolean",
                    "default": false,
                    "description": "Can handle marketing responsibilities"
                  },
                  "primaryDisciplineId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Primary discipline ID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Employee created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Employee"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/employees/roles/capabilities": {
      "get": {
        "summary": "Get employees filtered by role capabilities",
        "tags": [
          "Employees"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of employees per page"
          },
          {
            "in": "query",
            "name": "canBeProjectManager",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter employees who can be project managers"
          },
          {
            "in": "query",
            "name": "canBePrincipal",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter employees who can be principals"
          },
          {
            "in": "query",
            "name": "canBeMarketing",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter employees who can handle marketing"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "description": "Filter by employee status"
          }
        ],
        "responses": {
          "200": {
            "description": "Employees with capabilities retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Employee"
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "totalCount": {
                          "type": "integer"
                        },
                        "pageSize": {
                          "type": "integer"
                        },
                        "currentPage": {
                          "type": "integer"
                        },
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "hasPreviousPage": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/employees/{id}": {
      "get": {
        "summary": "Get employee by ID with detailed information",
        "tags": [
          "Employees"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Employee ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Employee retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Employee"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Employee not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "summary": "Update employee information",
        "tags": [
          "Employees"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Employee ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "employeeNumber": {
                    "type": "string",
                    "description": "Employee number"
                  },
                  "name": {
                    "type": "string",
                    "description": "Employee full name"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Employee email address"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE"
                    ],
                    "description": "Employee status"
                  },
                  "isProjectManager": {
                    "type": "boolean",
                    "description": "Can serve as project manager"
                  },
                  "isPrincipal": {
                    "type": "boolean",
                    "description": "Can serve as principal"
                  },
                  "isMarketing": {
                    "type": "boolean",
                    "description": "Can handle marketing responsibilities"
                  },
                  "primaryDisciplineId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Primary discipline ID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Employee updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Employee"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Employee not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete employee",
        "tags": [
          "Employees"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Employee ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Employee deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Employee deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Employee not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/employees/{id}/deactivate": {
      "patch": {
        "summary": "Deactivate employee (set status to inactive)",
        "tags": [
          "Employees"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Employee ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Employee deactivated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Employee"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Employee not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/employees/{id}/history": {
      "get": {
        "summary": "Get employee history",
        "tags": [
          "Employees"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Employee ID"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 50
            },
            "description": "Number of history entries to return"
          },
          {
            "in": "query",
            "name": "since",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Show events since this timestamp"
          },
          {
            "in": "query",
            "name": "until",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Show events until this timestamp"
          }
        ],
        "responses": {
          "200": {
            "description": "Employee history retrieved successfully"
          },
          "404": {
            "description": "Employee not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/employees/{id}/at": {
      "get": {
        "summary": "Get employee state at specific timestamp",
        "tags": [
          "Employees"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Employee ID"
          },
          {
            "in": "query",
            "name": "ts",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Timestamp (ISO format)"
          }
        ],
        "responses": {
          "200": {
            "description": "Employee state at timestamp retrieved successfully"
          },
          "404": {
            "description": "Employee or state not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/employees/{id}/diff": {
      "get": {
        "summary": "Get diff between two employee history entries",
        "tags": [
          "Employees"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Employee ID"
          },
          {
            "in": "query",
            "name": "from",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "From timestamp"
          },
          {
            "in": "query",
            "name": "to",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "To timestamp"
          }
        ],
        "responses": {
          "200": {
            "description": "Diff retrieved successfully"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "404": {
            "description": "Employee or timestamps not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/projects": {
      "get": {
        "summary": "List all projects",
        "description": "Returns projects in either a simple or detailed shape.\n- view=simple (default): minimal project fields; client {id,name}; primaryDiscipline {id,name}; no phases/tasks/team.\n- view=detailed: includes phases[] (and tasks when requested) and team (employees[]) when included.\n",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1,
                2,
                3
              ]
            },
            "description": "Filter by project status"
          },
          {
            "in": "query",
            "name": "clientId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter by client ID"
          },
          {
            "in": "query",
            "name": "projectManagerId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter by project manager ID"
          },
          {
            "in": "query",
            "name": "projectNumber",
            "schema": {
              "type": "string"
            },
            "description": "Exact match on project number (e.g., P0123)"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Case-insensitive substring match on project name"
          },
          {
            "in": "query",
            "name": "clientNumber",
            "schema": {
              "type": "string"
            },
            "description": "Exact match on client number (e.g., C1234)"
          },
          {
            "in": "query",
            "name": "clientName",
            "schema": {
              "type": "string"
            },
            "description": "Case-insensitive substring match on client name"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Free-text search across project number, project name, client number, and client name"
          },
          {
            "in": "query",
            "name": "view",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "detailed"
              ],
              "default": "simple"
            },
            "description": "Controls response shape (simple excludes phases/tasks/team; detailed can include them)."
          },
          {
            "in": "query",
            "name": "include",
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated include flags. Allowed values: phases, phases.tasks, team"
          }
        ],
        "responses": {
          "200": {
            "description": "Projects retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Project"
                      }
                    }
                  }
                },
                "examples": {
                  "simple": {
                    "summary": "Simple view",
                    "value": {
                      "status": "success",
                      "data": [
                        {
                          "id": "11111111-1111-1111-1111-111111111111",
                          "name": "Downtown Office",
                          "description": "Commercial office project",
                          "status": 0,
                          "projectType": "COMMERCIAL",
                          "invoiceFormat": "STANDARD",
                          "totalContractAmount": 150000,
                          "estimatedStartDate": "2025-01-15",
                          "estimatedEndDate": "2025-12-15",
                          "location": "Seattle, WA",
                          "client": {
                            "id": "40000000-0000-0000-0000-000000000001",
                            "name": "ABC Development Corp"
                          },
                          "primaryDiscipline": {
                            "id": "20000000-0000-0000-0000-000000000001",
                            "name": "Architecture"
                          },
                          "createdAt": "2025-01-01T10:00:00.000Z",
                          "updatedAt": "2025-01-02T10:00:00.000Z"
                        }
                      ]
                    }
                  },
                  "detailed": {
                    "summary": "Detailed view with phases, tasks, and team",
                    "value": {
                      "status": "success",
                      "data": [
                        {
                          "id": "11111111-1111-1111-1111-111111111111",
                          "name": "Downtown Office",
                          "status": 0,
                          "client": {
                            "id": "40000000-0000-0000-0000-000000000001",
                            "name": "ABC Development Corp"
                          },
                          "primaryDiscipline": {
                            "id": "20000000-0000-0000-0000-000000000001",
                            "name": "Architecture"
                          },
                          "phases": [
                            {
                              "id": "22222222-2222-2222-2222-222222222222",
                              "name": "Schematic Design",
                              "status": 0,
                              "displayOrder": 1,
                              "tasks": [
                                {
                                  "id": "33333333-3333-3333-3333-333333333333",
                                  "name": "Site Survey",
                                  "status": 0,
                                  "displayOrder": 1
                                }
                              ]
                            }
                          ],
                          "team": [
                            {
                              "id": "30000000-0000-0000-0000-000000000001",
                              "name": "John Smith",
                              "email": "john.smith@company.com",
                              "primaryDiscipline": {
                                "name": "Architecture"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create a new project",
        "tags": [
          "Projects"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "projectNumber": {
                    "type": "string",
                    "description": "Project number (auto-generated if not provided)"
                  },
                  "name": {
                    "type": "string",
                    "description": "Project name"
                  },
                  "description": {
                    "type": "string",
                    "description": "Project description"
                  },
                  "clientId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Client ID"
                  },
                  "clientNumber": {
                    "type": "string",
                    "description": "Alternative to clientId - client number lookup"
                  },
                  "projectType": {
                    "type": "string",
                    "enum": [
                      "RESIDENTIAL",
                      "COMMERCIAL",
                      "INSTITUTIONAL",
                      "INDUSTRIAL",
                      "MIXED_USE",
                      "RENOVATION",
                      "NEW_CONSTRUCTION"
                    ],
                    "description": "Type of project"
                  },
                  "primaryDisciplineId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Primary discipline ID"
                  },
                  "invoiceFormat": {
                    "type": "string",
                    "enum": [
                      "STANDARD",
                      "DETAILED",
                      "SUMMARY",
                      "HOURLY_BREAKDOWN",
                      "MILESTONE_BASED"
                    ],
                    "description": "Invoice format"
                  },
                  "projectManagerId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Project manager employee ID"
                  },
                  "principalInChargeId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Principal in charge employee ID"
                  },
                  "marketingContactId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Marketing contact employee ID"
                  },
                  "billingManagerId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Billing manager employee ID"
                  },
                  "totalContractAmount": {
                    "type": "number",
                    "format": "decimal",
                    "description": "Total contract amount"
                  },
                  "estimatedStartDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Estimated start date"
                  },
                  "estimatedEndDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Estimated end date"
                  },
                  "location": {
                    "type": "string",
                    "description": "Project location"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Additional notes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Project"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/projects/{id}": {
      "get": {
        "summary": "Get project details with nested data",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Project retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Project"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "summary": "Update project",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "status": {
                    "type": "integer",
                    "enum": [
                      0,
                      1,
                      2,
                      3
                    ]
                  },
                  "projectType": {
                    "type": "string",
                    "enum": [
                      "RESIDENTIAL",
                      "COMMERCIAL",
                      "INSTITUTIONAL",
                      "INDUSTRIAL",
                      "MIXED_USE",
                      "RENOVATION",
                      "NEW_CONSTRUCTION"
                    ]
                  },
                  "invoiceFormat": {
                    "type": "string",
                    "enum": [
                      "STANDARD",
                      "DETAILED",
                      "SUMMARY",
                      "HOURLY_BREAKDOWN",
                      "MILESTONE_BASED"
                    ]
                  },
                  "totalContractAmount": {
                    "type": "number",
                    "format": "decimal"
                  },
                  "estimatedStartDate": {
                    "type": "string",
                    "format": "date"
                  },
                  "estimatedEndDate": {
                    "type": "string",
                    "format": "date"
                  },
                  "location": {
                    "type": "string"
                  },
                  "notes": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated successfully"
          },
          "404": {
            "description": "Project not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete project",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Project deleted successfully"
          },
          "404": {
            "description": "Project not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/projects/{id}/phases": {
      "get": {
        "summary": "Get project phases",
        "tags": [
          "Phases"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Phases retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Phase"
                      }
                    }
                  }
                },
                "example": {
                  "status": "success",
                  "data": [
                    {
                      "id": "22222222-2222-2222-2222-222222222222",
                      "name": "Schematic Design",
                      "status": 0,
                      "displayOrder": 1,
                      "tasks": [
                        {
                          "id": "33333333-3333-3333-3333-333333333333",
                          "name": "Site Survey",
                          "status": 0,
                          "estimatedHours": 40
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create phase for project",
        "tags": [
          "Phases"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Phase name"
                  },
                  "description": {
                    "type": "string",
                    "description": "Phase description"
                  },
                  "budgetAllocationPercent": {
                    "type": "number",
                    "format": "decimal",
                    "description": "Budget allocation percentage"
                  },
                  "estimatedHours": {
                    "type": "number",
                    "format": "decimal",
                    "description": "Estimated hours"
                  },
                  "phaseBudget": {
                    "type": "number",
                    "format": "decimal",
                    "description": "Phase budget amount"
                  },
                  "displayOrder": {
                    "type": "integer",
                    "description": "Display order"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Additional notes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Phase created successfully",
            "content": {
              "application/json": {
                "example": {
                  "status": "success",
                  "data": {
                    "id": "22222222-2222-2222-2222-222222222222",
                    "name": "Schematic Design",
                    "status": 0
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/projects/{projectId}/phases/{phaseId}": {
      "put": {
        "summary": "Update a phase",
        "tags": [
          "Phases"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "phaseId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "status": {
                    "type": "integer"
                  },
                  "displayOrder": {
                    "type": "integer"
                  },
                  "budgetAllocationPercent": {
                    "type": "number"
                  },
                  "estimatedHours": {
                    "type": "number"
                  },
                  "phaseBudget": {
                    "type": "number"
                  },
                  "notes": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phase updated"
          },
          "404": {
            "description": "Phase not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a phase",
        "tags": [
          "Phases"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "phaseId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phase deleted"
          },
          "404": {
            "description": "Phase not found"
          }
        }
      }
    },
    "/api/projects/{projectId}/phases/{phaseId}/tasks": {
      "get": {
        "summary": "List tasks for a phase",
        "tags": [
          "Tasks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "phaseId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks listed",
            "content": {
              "application/json": {
                "example": {
                  "status": "success",
                  "data": [
                    {
                      "id": "33333333-3333-3333-3333-333333333333",
                      "name": "Site Survey",
                      "status": 0,
                      "displayOrder": 1
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a task",
        "tags": [
          "Tasks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "phaseId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "status": {
                    "type": "integer"
                  },
                  "displayOrder": {
                    "type": "integer"
                  },
                  "estimatedHours": {
                    "type": "number"
                  },
                  "taskBudget": {
                    "type": "number"
                  },
                  "notes": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created",
            "content": {
              "application/json": {
                "example": {
                  "status": "success",
                  "data": {
                    "id": "44444444-4444-4444-4444-444444444444",
                    "name": "Concept Options",
                    "status": 0
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/phases/{phaseId}/tasks/{taskId}": {
      "put": {
        "summary": "Update a task",
        "tags": [
          "Tasks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "phaseId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "status": {
                    "type": "integer"
                  },
                  "displayOrder": {
                    "type": "integer"
                  },
                  "estimatedHours": {
                    "type": "number"
                  },
                  "actualHours": {
                    "type": "number"
                  },
                  "taskBudget": {
                    "type": "number"
                  },
                  "notes": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated",
            "content": {
              "application/json": {
                "example": {
                  "status": "success",
                  "data": {
                    "id": "44444444-4444-4444-4444-444444444444",
                    "name": "Concept Options",
                    "status": 1
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a task",
        "tags": [
          "Tasks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "phaseId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task deleted",
            "content": {
              "application/json": {
                "example": {
                  "status": "success",
                  "message": "Task deleted"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/team": {
      "get": {
        "summary": "Get project team members",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Team members retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProjectTeamMember"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Add team member to project",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "employeeId"
                ],
                "properties": {
                  "employeeId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Employee ID to add to team"
                  },
                  "role": {
                    "type": "string",
                    "description": "Role of team member"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Team member added successfully"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/projects/{projectId}/team/{memberId}": {
      "delete": {
        "summary": "Remove team member from project",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Project ID"
          },
          {
            "in": "path",
            "name": "memberId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Team member ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Team member removed successfully"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/projects/{id}/history": {
      "get": {
        "summary": "Get project history",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Project ID"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 50
            },
            "description": "Number of history entries to return"
          },
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            },
            "description": "Cursor for pagination"
          },
          {
            "in": "query",
            "name": "entityType",
            "schema": {
              "type": "string",
              "enum": [
                "PROJECT",
                "TEAM",
                "PHASE",
                "TASK"
              ]
            },
            "description": "Filter by entity type"
          },
          {
            "in": "query",
            "name": "since",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Show events since this timestamp"
          },
          {
            "in": "query",
            "name": "until",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Show events until this timestamp"
          }
        ],
        "responses": {
          "200": {
            "description": "Project history retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "version": {
                            "type": "integer"
                          },
                          "operation": {
                            "type": "string",
                            "enum": [
                              "CREATE",
                              "UPDATE",
                              "DELETE"
                            ]
                          },
                          "entityType": {
                            "type": "string",
                            "enum": [
                              "PROJECT",
                              "TEAM",
                              "PHASE",
                              "TASK"
                            ]
                          },
                          "entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "changedAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "changedBy": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "reason": {
                            "type": "string"
                          },
                          "changedFields": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "delta": {
                            "type": "object"
                          },
                          "snapshot": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/projects/{id}/versions/{version}": {
      "get": {
        "summary": "Get project at specific version",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Project ID"
          },
          {
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project version number"
          },
          {
            "in": "query",
            "name": "include",
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of what to include (phases,tasks,team)"
          }
        ],
        "responses": {
          "200": {
            "description": "Project version retrieved successfully"
          },
          "404": {
            "description": "Project or version not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/projects/{id}/at": {
      "get": {
        "summary": "Get project state at specific timestamp",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Project ID"
          },
          {
            "in": "query",
            "name": "ts",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Timestamp (ISO format)"
          }
        ],
        "responses": {
          "200": {
            "description": "Project state at timestamp retrieved successfully"
          },
          "404": {
            "description": "Project or state not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/projects/{id}/diff": {
      "get": {
        "summary": "Get diff between two project versions",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Project ID"
          },
          {
            "in": "query",
            "name": "from",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "From version number"
          },
          {
            "in": "query",
            "name": "to",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "To version number"
          }
        ],
        "responses": {
          "200": {
            "description": "Diff retrieved successfully"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "404": {
            "description": "Project or versions not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/projects/{id}/llm-bundle": {
      "get": {
        "summary": "Get LLM-friendly project bundle with current state and recent history",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Project ID"
          },
          {
            "in": "query",
            "name": "historyLimit",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "description": "Number of recent history events to include"
          }
        ],
        "responses": {
          "200": {
            "description": "LLM bundle retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "currentSnapshot": {
                          "type": "object",
                          "description": "Current project state with nested data"
                        },
                        "recentHistory": {
                          "type": "array",
                          "description": "Recent changes with compact deltas",
                          "items": {
                            "type": "object",
                            "properties": {
                              "version": {
                                "type": "integer"
                              },
                              "operation": {
                                "type": "string"
                              },
                              "entityType": {
                                "type": "string"
                              },
                              "changedAt": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "changedFields": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "delta": {
                                "type": "object"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/rate-tables": {
      "get": {
        "summary": "List all rate tables",
        "tags": [
          "Rate Tables"
        ],
        "responses": {
          "200": {
            "description": "Rate tables retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "name": {
                            "type": "string"
                          },
                          "effectiveDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "status": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create a new rate table",
        "tags": [
          "Rate Tables"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Rate table name"
                  },
                  "effectiveDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Effective date (defaults to current date)"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "default": "active",
                    "description": "Rate table status"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Rate table created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/RateTable"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/rate-tables/{id}": {
      "get": {
        "summary": "Get rate table by ID",
        "tags": [
          "Rate Tables"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate table retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/RateTable"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Rate table not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "summary": "Update rate table",
        "tags": [
          "Rate Tables"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Rate table name"
                  },
                  "effectiveDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Effective date"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "description": "Rate table status"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rate table updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/RateTable"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Rate table not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete rate table",
        "tags": [
          "Rate Tables"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate table deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Rate table deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Rate table not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/rate-tables/active": {
      "get": {
        "summary": "Get only active rate tables",
        "tags": [
          "Rate Tables"
        ],
        "responses": {
          "200": {
            "description": "Active rate tables retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "name": {
                            "type": "string"
                          },
                          "effectiveDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "active"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/timesheets": {
      "get": {
        "summary": "List timesheets with filters",
        "tags": [
          "Timesheets"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "employeeId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter by employee ID"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "SUBMITTED",
                "APPROVED",
                "REJECTED"
              ]
            },
            "description": "Filter by timesheet status"
          },
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter timesheets starting from this date"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter timesheets ending before this date"
          }
        ],
        "responses": {
          "200": {
            "description": "Timesheets retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Timesheet"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "summary": {
                                "$ref": "#/components/schemas/TimesheetSummary"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create new timesheet",
        "tags": [
          "Timesheets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "employeeId",
                  "periodStart",
                  "periodEnd"
                ],
                "properties": {
                  "employeeId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Employee ID"
                  },
                  "periodStart": {
                    "type": "string",
                    "format": "date",
                    "description": "Period start date"
                  },
                  "periodEnd": {
                    "type": "string",
                    "format": "date",
                    "description": "Period end date"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Additional notes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Timesheet created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Timesheet"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/timesheets/{id}": {
      "get": {
        "summary": "Get timesheet with time entries",
        "tags": [
          "Timesheets"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Timesheet ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Timesheet retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Timesheet"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Timesheet not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "summary": "Update timesheet",
        "tags": [
          "Timesheets"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Timesheet ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "periodStart": {
                    "type": "string",
                    "format": "date"
                  },
                  "periodEnd": {
                    "type": "string",
                    "format": "date"
                  },
                  "notes": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Timesheet updated successfully"
          },
          "404": {
            "description": "Timesheet not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/timesheets/{id}/submit": {
      "post": {
        "summary": "Submit timesheet for approval",
        "tags": [
          "Timesheets"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Timesheet ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Timesheet submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Timesheet"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Timesheet not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/timesheets/{id}/approve": {
      "post": {
        "summary": "Approve timesheet",
        "tags": [
          "Timesheets"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Timesheet ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "approvedBy"
                ],
                "properties": {
                  "approvedBy": {
                    "type": "string",
                    "format": "uuid",
                    "description": "ID of user approving the timesheet"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Timesheet approved successfully"
          },
          "404": {
            "description": "Timesheet not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/timesheets/{id}/reject": {
      "post": {
        "summary": "Reject timesheet",
        "tags": [
          "Timesheets"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Timesheet ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Timesheet rejected successfully"
          },
          "404": {
            "description": "Timesheet not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/timesheets/{id}/entries": {
      "get": {
        "summary": "Get time entries for timesheet",
        "tags": [
          "Time Entries"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Timesheet ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Time entries retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TimeEntry"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create time entry",
        "tags": [
          "Time Entries"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Timesheet ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "employeeId",
                  "entryDate",
                  "durationHours",
                  "description"
                ],
                "properties": {
                  "employeeId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "projectId": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": true,
                    "description": "Project ID (for project-level time)"
                  },
                  "phaseId": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": true,
                    "description": "Phase ID (for phase-level time)"
                  },
                  "taskId": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": true,
                    "description": "Task ID (for task-level time)"
                  },
                  "entryDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Date of work"
                  },
                  "startTime": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "description": "Start time (optional)"
                  },
                  "endTime": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "description": "End time (optional)"
                  },
                  "durationHours": {
                    "type": "number",
                    "format": "decimal",
                    "description": "Duration in hours"
                  },
                  "description": {
                    "type": "string",
                    "description": "Work description"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Additional notes"
                  },
                  "entryType": {
                    "type": "string",
                    "enum": [
                      "REGULAR",
                      "OVERTIME",
                      "VACATION",
                      "SICK_LEAVE",
                      "HOLIDAY",
                      "TRAINING",
                      "ADMINISTRATIVE"
                    ],
                    "default": "REGULAR"
                  },
                  "isBillable": {
                    "type": "boolean",
                    "default": true
                  },
                  "hourlyRate": {
                    "type": "number",
                    "format": "decimal",
                    "nullable": true,
                    "description": "Hourly rate for billing"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Time entry created successfully"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/timesheets/{timesheetId}/entries/{entryId}": {
      "put": {
        "summary": "Update time entry",
        "tags": [
          "Time Entries"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "timesheetId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Timesheet ID"
          },
          {
            "in": "path",
            "name": "entryId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Time entry ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": true
                  },
                  "phaseId": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": true
                  },
                  "taskId": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": true
                  },
                  "entryDate": {
                    "type": "string",
                    "format": "date"
                  },
                  "startTime": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true
                  },
                  "endTime": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true
                  },
                  "durationHours": {
                    "type": "number",
                    "format": "decimal"
                  },
                  "description": {
                    "type": "string"
                  },
                  "notes": {
                    "type": "string"
                  },
                  "entryType": {
                    "type": "string",
                    "enum": [
                      "REGULAR",
                      "OVERTIME",
                      "VACATION",
                      "SICK_LEAVE",
                      "HOLIDAY",
                      "TRAINING",
                      "ADMINISTRATIVE"
                    ]
                  },
                  "isBillable": {
                    "type": "boolean"
                  },
                  "hourlyRate": {
                    "type": "number",
                    "format": "decimal",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Time entry updated successfully"
          },
          "404": {
            "description": "Time entry not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete time entry",
        "tags": [
          "Time Entries"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "timesheetId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Timesheet ID"
          },
          {
            "in": "path",
            "name": "entryId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Time entry ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Time entry deleted successfully"
          },
          "404": {
            "description": "Time entry not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/timesheets/{id}/history": {
      "get": {
        "summary": "Get timesheet history",
        "tags": [
          "Timesheets"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Timesheet ID"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 50
            },
            "description": "Number of history entries to return"
          },
          {
            "in": "query",
            "name": "since",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Show events since this timestamp"
          },
          {
            "in": "query",
            "name": "until",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Show events until this timestamp"
          }
        ],
        "responses": {
          "200": {
            "description": "Timesheet history retrieved successfully"
          },
          "404": {
            "description": "Timesheet not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/timesheets/{id}/at": {
      "get": {
        "summary": "Get timesheet state at specific timestamp",
        "tags": [
          "Timesheets"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Timesheet ID"
          },
          {
            "in": "query",
            "name": "ts",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Timestamp (ISO format)"
          }
        ],
        "responses": {
          "200": {
            "description": "Timesheet state at timestamp retrieved successfully"
          },
          "404": {
            "description": "Timesheet or state not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/timesheets/{id}/diff": {
      "get": {
        "summary": "Get diff between two timesheet history entries",
        "tags": [
          "Timesheets"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Timesheet ID"
          },
          {
            "in": "query",
            "name": "from",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "From timestamp"
          },
          {
            "in": "query",
            "name": "to",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "To timestamp"
          }
        ],
        "responses": {
          "200": {
            "description": "Diff retrieved successfully"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "404": {
            "description": "Timesheet or timestamps not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/users": {
      "get": {
        "summary": "List all users with filtering and pagination",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "description": "Items per page"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search by username"
          },
          {
            "in": "query",
            "name": "hasEmployee",
            "schema": {
              "type": "string",
              "enum": [
                true,
                false
              ]
            },
            "description": "Filter by employee association"
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "username": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "employee": {
                            "type": "object",
                            "nullable": true,
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "name": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "totalCount": {
                          "type": "integer"
                        },
                        "pageSize": {
                          "type": "integer"
                        },
                        "currentPage": {
                          "type": "integer"
                        },
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "hasPreviousPage": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create a new user",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Unique username"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Username already exists"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/users/{id}": {
      "get": {
        "summary": "Get user by ID with associated employee details",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "summary": "Update user",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Updated username"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "Username already exists"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete user (cannot delete users with associated employees)",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "User deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot delete user with associated employee",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Cannot delete user with associated employee record. Delete or unlink the employee first."
                    },
                    "code": {
                      "type": "string",
                      "example": "USER_HAS_EMPLOYEE"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  }
}